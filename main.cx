package main
import "glfw"
import "gl"
import "os"

import "LoopLimiter"
import "LoopTracker"


// *************************************
// Start - Sprites
// *************************************
type Sprite struct {
    x f32
    y f32
    vx f32
    vy f32
    width i32
    height i32
    textureSheet []i32
}

func createYarnBallSprite()(yarnBall Sprite) {
    var sprite Sprite
    sprite.x = 10.0
    sprite.y = 10.0
    sprite.vx = 10.0
    sprite.vy = 10.0
    sprite.width = 32
    sprite.height = 32

    //todo... something not working here... FIX!
    var frame0 i32 = getTexture("textures/yarnBall0.png")
    var frame1 i32 = getTexture("textures/yarnBall1.png")
    var frame2 i32 = getTexture("textures/yarnBall2.png")
    var frame3 i32 = getTexture("textures/yarnBall3.png")
    
    var testArray []i32
    sprite.textureSheet = append(sprite.textureSheet, frame0)
    i32.print(frame0)
    i32.print(sprite.textureSheet)

    sprite.textureSheet = append(sprite.textureSheet, frame0)
    //sprite.textureSheet = append(sprite.textureSheet, getTexture("textures/yarnBall0.png"))
    //sprite.textureSheet = append(sprite.textureSheet, getTexture("textures/yarnBall1.png"))
    //sprite.textureSheet = append(sprite.textureSheet, getTexture("textures/yarnBall2.png"))
    //sprite.textureSheet = append(sprite.textureSheet, getTexture("textures/yarnBall3.png"))

    yarnBall = sprite
}

func getTexture(textureFileName str)(texture i32) {
    var workingDirectory str = os.GetWorkingDirectory()

    texture = gl.NewTexture(str.concat(workingDirectory, textureFileName))
}

func initSprites()(out []Sprite) {
    var sprites []Sprite
    sprites = append(sprites, createYarnBallSprite())

    out = sprites
}
// *************************************
// End - Sprites
// *************************************


// *************************************
// Start - Game
// *************************************
type Window struct {
    Height i32
    Width i32
}

func initGlfw(window Window) {
    glfw.Init()
    glfw.WindowHint(glfw.Resizable, glfw.False)
    glfw.CreateWindow("window", window.Width, window.Height, "Game Test - CX")
    glfw.MakeContextCurrent("window")
}

func startGame() {
    var program i32 = gl.CreateProgram()
    var mainLoopTracker LoopTracker.LoopTracker = LoopTracker.createLoopTracker(1.0D, "Main loop")
    var fpsTracker LoopTracker.LoopTracker = LoopTracker.createLoopTracker(1.0D, "Render loop")
    var fpsLimiter LoopLimiter.LoopLimiter = LoopLimiter.createLoopLimiter(60, true)
    var animationLimiter LoopLimiter.LoopLimiter = LoopLimiter.createLoopLimiter(2, true)

    //need to use this after the bug is fixed about arrays in structs
    //var sprites []Sprite = initSprites() 

    //todo... not rely on this...
    var yarnTexture []i32
    var textureFrame i32 = 0
    var moveSpeed f32 = 0.1
    var x f32 = 0.0
    var y f32 = -1.0

    yarnTexture = append(yarnTexture, getTexture("textures/yarnBall0.png"))
    yarnTexture = append(yarnTexture, getTexture("textures/yarnBall1.png"))
    yarnTexture = append(yarnTexture, getTexture("textures/yarnBall2.png"))
    yarnTexture = append(yarnTexture, getTexture("textures/yarnBall3.png"))

    gl.LinkProgram(program)

    for bool.not(glfw.ShouldClose("window")) {
        var currentTime f64 = glfw.GetTime()

        mainLoopTracker = LoopTracker.updateLoopTracker(mainLoopTracker, currentTime)
        fpsLimiter = LoopLimiter.updateLoopLimiter(fpsLimiter, currentTime)
        
        y = y + moveSpeed * f64.f32(mainLoopTracker.deltaTime)
        //mainGameUpdate(mainLoopTracker.deltaTime)
        
        if fpsLimiter.limitReached {
            fpsTracker = LoopTracker.updateLoopTracker(fpsTracker, currentTime)
            
            gl.UseProgram(program)
            gl.ClearColor(0.0, 0.0, 0.0, 1.0)
            gl.Clear(gl.COLOR_BUFFER_BIT)
            gl.Enable(gl.TEXTURE_2D)
            draw(x, y, 1.0/1024.0*32.0, 1.0/768.0*32.0, yarnTexture[textureFrame])
                        
            glfw.PollEvents()
            glfw.SwapBuffers("window")

           animationLimiter = LoopLimiter.updateLoopLimiter(animationLimiter, currentTime) 
           if animationLimiter.limitReached {
                if textureFrame >= 3 {
                    textureFrame = 0
                } else {
                    textureFrame = textureFrame + 1
                }
           }
        }
    }
}

func mainGameUpdate(deltaTime f64) {

}

func draw(xCoord f32, yCoord f32, scaleX f32, scaleY f32, texture i32) {
    gl.LoadIdentity()
    gl.Translatef(xCoord, yCoord, 0.0) // x-coordinates, y-coordinates, z-coordinates
    //gl.Rotatef(0.0, 0.0, 0.0, 1.0) // Rotate along the z-axis
    gl.BindTexture(gl.TEXTURE_2D, texture)
    gl.Scalef(scaleX, scaleY, 0.0)

    gl.Begin(gl.QUADS)
    gl.TexCoord2d(0.0D, 0.0D)
    gl.Vertex2f(-1.0, 1.0)
    gl.TexCoord2d(1.0D, 0.0D)
    gl.Vertex2f(1.0, 1.0)
    gl.TexCoord2d(1.0D, 1.0D)
    gl.Vertex2f(1.0, -1.0)
    gl.TexCoord2d(0.0D, 1.0D)
    gl.Vertex2f(-1.0, -1.0)
    gl.End()
}

func main() {
    var window Window
    window = Window {Width: 1024, Height: 768}

    initGlfw(window)
    gl.Init()

    startGame()
}
// *************************************
// End - Game
// *************************************