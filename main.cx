package main
import "glfw"
import "gl"
import "os"

import "LoopLimiter"
import "LoopTracker"

type Vector2D struct {
    x f32
    y f32
}

// *************************************
// Start - Sprites
// *************************************
type Sprite struct {
    position Vector2D
    lastPosition Vector2D
    velocity Vector2D
    acceleration f32
    maxVelocity f32
    width f32
    height f32
    frames []i32
    currentFrame i32
}

func getTexture(textureFileName str)(texture i32) {
    var workingDirectory str = os.GetWorkingDirectory()

    texture = gl.NewTexture(str.concat(workingDirectory, textureFileName))
}

func spriteTop(sprite Sprite)(out f32) {
    out = sprite.position.y + sprite.height / 2.0
}

func spriteBottom(sprite Sprite)(out f32) {
    out = sprite.position.y - sprite.height / 2.0
}

func spriteRight(sprite Sprite)(out f32) {
    out = sprite.position.x + sprite.width / 2.0
}

func spriteLeft(sprite Sprite)(out f32) {
    out = sprite.position.x - sprite.width / 2.0
}

func spriteLastTop(sprite Sprite)(out f32) {
    out = sprite.lastPosition.y + sprite.height / 2.0
}

func spriteLastBottom(sprite Sprite)(out f32) {
    out = sprite.lastPosition.y - sprite.height / 2.0
}

func spriteLastRight(sprite Sprite)(out f32) {
    out = sprite.lastPosition.x + sprite.width / 2.0
}

func spriteLastLeft(sprite Sprite)(out f32) {
    out = sprite.lastPosition.x - sprite.width / 2.0
}

func createYarnBallSprite()(yarnBall Sprite) {
    var sprite Sprite
    sprite.acceleration = 1.0
    sprite.maxVelocity = 1.0
    sprite.width = 64.0 / 1024.0
    sprite.height = 64.0 / 768.0

    sprite.frames = append(sprite.frames, getTexture("textures/yarnBall0.png"))
    sprite.frames = append(sprite.frames, getTexture("textures/yarnBall1.png"))
    sprite.frames = append(sprite.frames, getTexture("textures/yarnBall2.png"))
    sprite.frames = append(sprite.frames, getTexture("textures/yarnBall3.png"))

    yarnBall = sprite
}

func createSynthCatSprite()(synthCat Sprite) {
    var sprite Sprite
    sprite.acceleration = 1.0
    sprite.maxVelocity = 1.0
    sprite.width = 200.0 / 1024.0
    sprite.height = 200.0 / 768.0

    sprite.frames = append(sprite.frames, getTexture("textures/synth_cat.png"))

    synthCat = sprite
}

func initSprites()(out []Sprite) {
    var sprites []Sprite
    sprites = append(sprites, createYarnBallSprite())

    out = sprites
}
// *************************************
// End - Sprites
// *************************************

// *************************************
// Start - Game
// *************************************
var currentTime f64
var loopLimiter LoopLimiter.LoopLimiter = LoopLimiter.create(60, true)
var animationLimiter LoopLimiter.LoopLimiter = LoopLimiter.create(5, true)
var loopTracker LoopTracker.LoopTracker = LoopTracker.create(1.0D, "Main")

var synthCat Sprite
var yarnBall Sprite

var upPressed bool
var downPressed bool
var leftPressed bool
var rightPressed bool

type Window struct {
    Height i32
    Width i32
}

func initGlfw(window Window) {
    glfw.Init()
    glfw.WindowHint(glfw.Resizable, glfw.False)
    glfw.CreateWindow("window", window.Width, window.Height, "Game Test - CX")
    glfw.MakeContextCurrent("window")

    glfw.SetKeyCallback("window", "callback")
}

func callback(window str, key i32, scancode i32, action i32, mods i32) {
    // Up
    if key == 265 && action == 1 {
		upPressed = true
	} else if key == 265 && action == 0 {
		upPressed = false
    }
    
    // Down
    if key == 264 && action == 1 {
		downPressed = true
	} else if key == 264 && action == 0 {
		downPressed = false
    }

    // Left
    if key == 263 && action == 1 {
		leftPressed = true
	} else if key == 263 && action == 0 {
		leftPressed = false
    }

    // Right
    if key == 262 && action == 1 {
		rightPressed = true
	} else if key == 262 && action == 0 {
		rightPressed = false
    }
}

func startGame() {
    mainGameLoop()
}

func mainGameLoop()() {
    var program i32 = gl.CreateProgram()
    synthCat  = createSynthCatSprite()
    yarnBall = createYarnBallSprite()
    synthCat.position.y = 0.8
    yarnBall.position.x = 0.6
    yarnBall.position.y = -0.8
    yarnBall.velocity.y = 0.3
    yarnBall.velocity.x = 0.6

    for bool.not(glfw.ShouldClose("window")) {
        currentTime = glfw.GetTime()
        loopLimiter = LoopLimiter.update(loopLimiter, currentTime)
        animationLimiter = LoopLimiter.update(animationLimiter, currentTime)
        loopTracker = LoopTracker.update(loopTracker, currentTime)

        synthCat = updatePlayer(synthCat)
        yarnBall = updateBall(yarnBall)

        synthCat = updateSprite(synthCat)
        yarnBall = updateSprite(yarnBall)

        if loopLimiter.limitReached {
            gl.UseProgram(program)
            gl.ClearColor(0.0, 0.0, 0.0, 1.0)
            gl.Clear(gl.COLOR_BUFFER_BIT)
            gl.Enable(gl.TEXTURE_2D)

            synthCat = drawSprite(synthCat)
            yarnBall = drawSprite(yarnBall)
                        
            glfw.PollEvents()
            glfw.SwapBuffers("window")
        }
    }
}

func updatePlayer(player Sprite)(out Sprite) {
    if rightPressed == true {
        player.velocity.x = player.maxVelocity
    } 
    if leftPressed == true {
        player.velocity.x = -1.0*player.maxVelocity
    } 
    if rightPressed == false && leftPressed == false {
        player.velocity.x = 0.0
    }
    player.lastPosition = player.position
    out = player
}

func updateBall(ball Sprite)(out Sprite) {
    if ball.position.x >= 0.9 || ball.position.x <= -0.9 {
        ball.velocity.x = ball.velocity.x*-1.0
        if ball.position.x > 0.9 {
            ball.position.x = 0.9
        } else {
            ball.position.x = -0.9
        }
    }
    
    if ball.position.y >= 0.9 || ball.position.y <= -0.9 {
        ball.velocity.y = ball.velocity.y*-1.0
        if ball.position.y > 0.9 {
            ball.position.y = 0.9
        } else {
            ball.position.y = -0.9
        }
    }

    if spriteTop(ball) > spriteBottom(synthCat) && spriteLastTop(ball) < spriteLastBottom(synthCat) {
        if spriteRight(ball) >= spriteLeft(synthCat) && spriteLeft(ball) <= spriteRight(synthCat) {
            ball.position.y = spriteBottom(synthCat) - ball.height / 2.0
            ball.velocity.y = ball.velocity.y*-1.0
        }
    }

    ball.lastPosition = ball.position
    out = ball
}

func updateSprite(sprite Sprite)(out Sprite) {
    var xSpeed f32
    var ySpeed f32
    
    sprite.position.x = sprite.position.x + sprite.velocity.x * f64.f32(loopTracker.deltaTime)
    sprite.position.y = sprite.position.y + sprite.velocity.y * f64.f32(loopTracker.deltaTime)
    out = sprite
}

func drawSprites(sprites []Sprite) {for i := 0; i < len(sprites); i = i + 1 {
        drawSprite(sprites[i])
    }
}

func drawSprite(sprite Sprite)(out Sprite) {
    var sprite Sprite
    var width f32
    var height f32
    var frame i32

    width = sprite.width
    height = sprite.height
    
    if animationLimiter.limitReached {
        if sprite.currentFrame < len(sprite.frames) - 1 {
            sprite.currentFrame = sprite.currentFrame + 1
        } else {
            sprite.currentFrame = 0
        }
    }

    frame = sprite.frames[sprite.currentFrame]

    draw(sprite.position.x, sprite.position.y, width, height, frame)

    out = sprite
}

func draw(xCoord f32, yCoord f32, width f32, height f32, texture i32) {
    gl.LoadIdentity()
    gl.Translatef(xCoord, yCoord, 0.0)
    gl.Rotatef(0.0, 0.0, 0.0, 1.0) // I'm not sure what this does...
    gl.BindTexture(gl.TEXTURE_2D, texture)
    gl.Scalef(width/2.0, height/2.0, 0.0) // Am I doing this right???

    gl.Begin(gl.QUADS)
    gl.TexCoord2d(0.0D, 0.0D)
    gl.Vertex2f(-1.0, 1.0)
    gl.TexCoord2d(1.0D, 0.0D)
    gl.Vertex2f(1.0, 1.0)
    gl.TexCoord2d(1.0D, 1.0D)
    gl.Vertex2f(1.0, -1.0)
    gl.TexCoord2d(0.0D, 1.0D)
    gl.Vertex2f(-1.0, -1.0)
    gl.End()
}

func main() {
    var window Window
    window = Window {Width: 1024, Height: 768}

    initGlfw(window)
    gl.Init()

    startGame()
}
// *************************************
// End - Game
// *************************************