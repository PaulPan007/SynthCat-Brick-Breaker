package main
import "glfw"
import "gl"
import "os"

import "LoopLimiter"
import "LoopTracker"


// *************************************
// Start - Sprites
// *************************************
type Animation struct {
    frames []i32
    currentFrame i32
    fpsLimiter LoopLimiter
}

type Sprite struct {
    x f32
    y f32
    vx f32
    vy f32
    width f32
    height f32
    animations []Animation
}

func getTexture(textureFileName str)(texture i32) {
    var workingDirectory str = os.GetWorkingDirectory()

    texture = gl.NewTexture(str.concat(workingDirectory, textureFileName))
}

func createAnimation(frames []i32, fps i32)(out Animation) {
    var animation Animation
    animation.frames = frames
    animation.currentFrame = 0
    animation.fpsLimiter = LoopLimiter.create(fps, true)

    out = animation
}

func createYarnBallSprite()(yarnBall Sprite) {
    var sprite Sprite
    sprite.x = 0.0
    sprite.y = -0.9
    sprite.vx = 0.1
    sprite.vy = 0.1
    sprite.width = 32.0
    sprite.height = 32.0

    var frames []i32
    frames = append(frames, getTexture("textures/yarnBall0.png"))
    frames = append(frames, getTexture("textures/yarnBall1.png"))
    frames = append(frames, getTexture("textures/yarnBall2.png"))
    frames = append(frames, getTexture("textures/yarnBall3.png"))

    sprite.animations = append(sprite.animations, createAnimation(frames, 5))

    yarnBall = sprite
}

func initSprites()(out []Sprite) {
    var sprites []Sprite
    sprites = append(sprites, createYarnBallSprite())

    out = sprites
}
// *************************************
// End - Sprites
// *************************************


// *************************************
// Sttart - Scenes
// *************************************
type Scene struct {
    name str
    sprites []Sprite
    loopLimiter LoopLimiter.LoopLimiter
    loopTracker LoopTracker.LoopTracker
    currentTime f64
}

func createScene(name str, sprites []Sprite)(scene Scene) {
    scene.name = name
    scene.sprites = sprites
    scene.loopTracker = LoopTracker.create(1.0D, "main")
    scene.loopLimiter = LoopLimiter.create(60, true)
}
// *************************************
// End - Scenes
// *************************************


// *************************************
// Start - Game
// *************************************
type Window struct {
    Height i32
    Width i32
}

func initGlfw(window Window) {
    glfw.Init()
    glfw.WindowHint(glfw.Resizable, glfw.False)
    glfw.CreateWindow("window", window.Width, window.Height, "Game Test - CX")
    glfw.MakeContextCurrent("window")
}

func startGame() {
    var sprites []Sprite = initSprites() 
    var scene Scene = createScene("main", sprites)

    mainGameLoop(scene)
}

func mainGameLoop(gameScene Scene)(out Scene) {
    var program i32 = gl.CreateProgram()
    var scene Scene = gameScene

    for bool.not(glfw.ShouldClose("window")) {
        scene.currentTime = glfw.GetTime()
        scene.loopLimiter = LoopLimiter.update(scene.loopLimiter, scene.currentTime)
        scene.loopTracker = LoopTracker.update(scene.loopTracker, scene.currentTime)

        //scene = updateScene(scene)

        if scene.loopLimiter.limitReached {
            gl.UseProgram(program)
            gl.ClearColor(0.0, 0.0, 0.0, 1.0)
            gl.Clear(gl.COLOR_BUFFER_BIT)
            gl.Enable(gl.TEXTURE_2D)

            drawSprites(scene.sprites)
                        
            glfw.PollEvents()
            glfw.SwapBuffers("window")
        }
    }
}

func updateScene(scene Scene)(out Scene) {

    scene.sprites = updateSprites(scene.sprites)

    out = scene
}

func updateSprites(sprites []Sprite)(out []Sprite) {}

func drawSprites(sprites []Sprite) {
    var sprite Sprite
    var width f32
    var height f32
    var animation Animation
    var frame i32

    for i := 0; i < len(sprites); i = i + 1 {
        sprite = sprites[i]
        width = sprite.width
        height = sprite.height
        animation = sprite.animations[0]
        frame = animation.frames[animation.currentFrame]

        draw(sprite.x, sprite.y, width, height, frame)
    }
}

func draw(xCoord f32, yCoord f32, width f32, height f32, texture i32) {
    gl.LoadIdentity()
    gl.Translatef(xCoord, yCoord, 0.0)
    gl.Rotatef(0.0, 0.0, 0.0, 1.0) // I'm not sure what this does...
    gl.BindTexture(gl.TEXTURE_2D, texture)
    gl.Scalef(width / 1024.0, height / 768.0, 0.0) // Am I doing this right???

    gl.Begin(gl.QUADS)
    gl.TexCoord2d(0.0D, 0.0D)
    gl.Vertex2f(-1.0, 1.0)
    gl.TexCoord2d(1.0D, 0.0D)
    gl.Vertex2f(1.0, 1.0)
    gl.TexCoord2d(1.0D, 1.0D)
    gl.Vertex2f(1.0, -1.0)
    gl.TexCoord2d(0.0D, 1.0D)
    gl.Vertex2f(-1.0, -1.0)
    gl.End()
}

func main() {
    var window Window
    window = Window {Width: 1024, Height: 768}

    initGlfw(window)
    gl.Init()

    startGame()
}
// *************************************
// End - Game
// *************************************